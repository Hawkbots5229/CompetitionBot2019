// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.DeepSpaceCompetitionBot.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5229.DeepSpaceCompetitionBot.Robot;

/**
 *
 */
public class ElevatorCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ElevatorCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevatorSub);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if (Robot.oi.mechanismController.getRawButton(1)) {
            Robot.elevatorSub.PIDElevator(4);
        }
        else if (Robot.oi.mechanismController.getRawButton(2)) {
            Robot.elevatorSub.PIDElevator(5);
        }
        else if (Robot.oi.mechanismController.getRawButton(3)) {
            Robot.elevatorSub.PIDElevator(8);
        }
        else if (Robot.oi.mechanismController.getRawButton(4)) {
            Robot.elevatorSub.PIDElevator(6);
        }
        else if (Robot.oi.mechanismController.getPOV() == 180) {
            Robot.elevatorSub.PIDElevator(1);
        }
        else if (Robot.oi.mechanismController.getPOV() == 90) {
            Robot.elevatorSub.PIDElevator(2);
        }
        else if (Robot.oi.mechanismController.getPOV() == 0 || Robot.oi.mechanismController.getPOV() == 360) {
            Robot.elevatorSub.PIDElevator(3);
        }
        else if (Robot.oi.mechanismController.getPOV() == 270) {
            Robot.elevatorSub.PIDElevator(7);
        }
        else if (Robot.oi.mechanismController.getRawAxis(5) > 0.1) {
            Robot.elevatorSub.PIDElevator(9);
        }
        else if (Robot.oi.mechanismController.getRawAxis(5) < -0.1) {
            Robot.elevatorSub.PIDElevator(10);
        }
        else if (Robot.oi.mechanismController.getRawButton(7) == false) {
            Robot.elevatorSub.RunElevator(Robot.oi.mechanismController.getRawAxis(1), false);
        }
        else if (Robot.oi.mechanismController.getRawButton(7) == true) {
            Robot.elevatorSub.RunElevator(Robot.oi.mechanismController.getRawAxis(1), true);
        }
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
