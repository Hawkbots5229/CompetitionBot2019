// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.DeepSpaceCompetitionBot;

import org.usfirst.frc5229.DeepSpaceCompetitionBot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.POVButton;
import edu.wpi.first.wpilibj.buttons.Trigger;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton halfSpeedControl;
    public JoystickButton quarterSpeedControl;
    public JoystickButton joystickButton1;
    public Joystick driveController;
    public JoystickButton inputBallBtn;
    public JoystickButton outputBallBtn;
    public JoystickButton removeElevatorLimitsBtn;
    public JoystickButton extendHatchPneumaticBtn;
    public JoystickButton retractHatchPneumaticBtn;
    public JoystickButton backLiftExtendBtn;
    public JoystickButton backLiftRetractBtn;
    public Joystick mechanismController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public POVButton POVUp;
    public POVButton POVLeft;
    public POVButton POVRight;
    public POVButton POVDown; 

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        mechanismController = new Joystick(1);
        
        backLiftRetractBtn = new JoystickButton(mechanismController, 6);
        backLiftRetractBtn.whenPressed(new BackLiftRetractCmd());
        backLiftExtendBtn = new JoystickButton(mechanismController, 5);
        backLiftExtendBtn.whenReleased(new BackLiftExtendCmd());
        retractHatchPneumaticBtn = new JoystickButton(mechanismController, 3);
        retractHatchPneumaticBtn.whenPressed(new RetractHatchPneumaticCmd());
        extendHatchPneumaticBtn = new JoystickButton(mechanismController, 1);
        extendHatchPneumaticBtn.whenPressed(new ExtendHatchPneumaticCmd());
        removeElevatorLimitsBtn = new JoystickButton(mechanismController, 7);
        removeElevatorLimitsBtn.whileHeld(new ElevatorNoLimitCmd());
        outputBallBtn = new JoystickButton(mechanismController, 4);
        outputBallBtn.whileHeld(new OutputBallCmd());
        inputBallBtn = new JoystickButton(mechanismController, 2);
        inputBallBtn.whileHeld(new IntakeBallCmd());
        driveController = new Joystick(0);
        
        joystickButton1 = new JoystickButton(driveController, 1);
        joystickButton1.whileHeld(new AutoAlignCmd());
        quarterSpeedControl = new JoystickButton(driveController, 5);
        quarterSpeedControl.whileHeld(new quarterSpeedCmd());
        halfSpeedControl = new JoystickButton(driveController, 6);
        halfSpeedControl.whileHeld(new halfSpeedCmd());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DrivetrainCmd", new DrivetrainCmd());
        SmartDashboard.putData("AutoAlignCmd", new AutoAlignCmd());
        SmartDashboard.putData("EleatorCmd", new EleatorCmd());
        SmartDashboard.putData("halfSpeedCmd", new halfSpeedCmd());
        SmartDashboard.putData("quarterSpeedCmd", new quarterSpeedCmd());
        SmartDashboard.putData("IntakeBallCmd", new IntakeBallCmd());
        SmartDashboard.putData("OutputBallCmd", new OutputBallCmd());
        SmartDashboard.putData("StopRollerCmd", new StopRollerCmd());
        SmartDashboard.putData("FrontLiftUp", new FrontLiftUp());
        SmartDashboard.putData("FrontLiftDown", new FrontLiftDown());
        SmartDashboard.putData("FrontLiftStop", new FrontLiftStop());
        SmartDashboard.putData("ElevatorNoLimitCmd", new ElevatorNoLimitCmd());
        SmartDashboard.putData("ExtendHatchPneumaticCmd", new ExtendHatchPneumaticCmd());
        SmartDashboard.putData("RetractHatchPneumaticCmd", new RetractHatchPneumaticCmd());
        SmartDashboard.putData("NeutralHatchPneumaticCmd", new NeutralHatchPneumaticCmd());
        SmartDashboard.putData("BackLiftNeutralCmd", new BackLiftNeutralCmd());
        SmartDashboard.putData("BackLiftExtendCmd", new BackLiftExtendCmd());
        SmartDashboard.putData("BackLiftRetractCmd", new BackLiftRetractCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    SmartDashboard.putNumber("Elevator Position", Robot.elevatorSub.pos);
            POVUp = new POVButton(mechanismController, 0);
        POVUp.whileHeld(new FrontLiftDown());
        POVLeft = new POVButton(mechanismController, 270);
        POVRight = new POVButton(mechanismController, 90);
        POVDown = new POVButton(mechanismController, 180);
        POVDown.whileHeld(new FrontLiftUp());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveController() {
        return driveController;
    }

    public Joystick getMechanismController() {
        return mechanismController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

