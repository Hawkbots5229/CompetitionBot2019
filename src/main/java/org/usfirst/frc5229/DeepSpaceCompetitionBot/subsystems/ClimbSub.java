// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.DeepSpaceCompetitionBot.subsystems;


import org.usfirst.frc5229.DeepSpaceCompetitionBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.ControlMode;


/**
 *
 */
public class ClimbSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX1;
    private WPI_TalonSRX talonSRX2;
    private WPI_TalonSRX talonSRX3;
    private WPI_TalonSRX talonSRX4;
    private WPI_TalonSRX wheelTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private int timeoutMs = 10;
    private int pidIdx = 0;
    private int threshold = 50;
    private int cruiseVel = 600;
    private int acc = 300;
    private int posUp = 300;
    private int posDown = 0;
    public ClimbSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX1 = new WPI_TalonSRX(0);
        
        
        
        talonSRX2 = new WPI_TalonSRX(3);
        
        
        
        talonSRX3 = new WPI_TalonSRX(8);
        
        
        
        talonSRX4 = new WPI_TalonSRX(9);
        
        
        
        wheelTalon = new WPI_TalonSRX(10);
        
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // Inverts Motors
			talonSRX1.setInverted(true);
			talonSRX2.setInverted(true);
			talonSRX3.setInverted(false);
			talonSRX4.setInverted(false);
			talonSRX3.setSensorPhase(false);
			talonSRX4.setSensorPhase(false);
			talonSRX1.setSensorPhase(false);
			talonSRX2.setSensorPhase(false);
			
			// Init Encoders
			talonSRX3.configSelectedFeedbackSensor(com.ctre.phoenix.motorcontrol.FeedbackDevice.QuadEncoder, 0, 0); // (feedbackDevice, int pidIdx, int timeoutMs)
			talonSRX4.configSelectedFeedbackSensor(com.ctre.phoenix.motorcontrol.FeedbackDevice.QuadEncoder, 0, 0);
			talonSRX1.configSelectedFeedbackSensor(com.ctre.phoenix.motorcontrol.FeedbackDevice.QuadEncoder, 0, 0);
			talonSRX2.configSelectedFeedbackSensor(com.ctre.phoenix.motorcontrol.FeedbackDevice.QuadEncoder, 0, 0);
			
			//Sets closed loop error range
			talonSRX3.configAllowableClosedloopError(0, threshold, timeoutMs);
			talonSRX1.configAllowableClosedloopError(0, threshold, timeoutMs);
			talonSRX4.configAllowableClosedloopError(0, threshold, timeoutMs);
			talonSRX2.configAllowableClosedloopError(0, threshold, timeoutMs);
			
			// Set the peak and nominal outputs, 12V means full 
			talonSRX3.configNominalOutputForward(0, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX3.configNominalOutputReverse(0, timeoutMs);
			talonSRX3.configPeakOutputForward(1, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX3.configPeakOutputReverse(-1, timeoutMs);
			
			talonSRX4.configNominalOutputForward(0, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX4.configNominalOutputReverse(0, timeoutMs);
			talonSRX4.configPeakOutputForward(1, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX4.configPeakOutputReverse(-1, timeoutMs);
			
			talonSRX1.configNominalOutputForward(0, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX1.configNominalOutputReverse(0, timeoutMs);
			talonSRX1.configPeakOutputForward(1, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX1.configPeakOutputReverse(-1, timeoutMs);
			
			talonSRX2.configNominalOutputForward(0, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX2.configNominalOutputReverse(0, timeoutMs);
			talonSRX2.configPeakOutputForward(1, timeoutMs); //(double percentOut, int timeoutMs)
			talonSRX2.configPeakOutputReverse(-1, timeoutMs);
			
			// Init Sensor to zero
			talonSRX3.setSelectedSensorPosition(0, pidIdx, timeoutMs); //(int sensorPos, int pidIdx, int timeoutMs) 
			talonSRX4.setSelectedSensorPosition(0, pidIdx, timeoutMs);
			talonSRX1.setSelectedSensorPosition(0, pidIdx, timeoutMs);
            talonSRX2.setSelectedSensorPosition(0, pidIdx, timeoutMs);
            
            // Init acceleration and cruise velocity - MotionMagic
			talonSRX3.configMotionCruiseVelocity(cruiseVel, timeoutMs); //(int sensorUnitsPer100ms, int timeoutMs)
			talonSRX3.configMotionAcceleration(acc, timeoutMs); //(int sensorUnitsPer100msPerSec, int timeoutMs)
			talonSRX4.configMotionCruiseVelocity(cruiseVel, timeoutMs);
			talonSRX4.configMotionAcceleration(acc, timeoutMs);
			talonSRX1.configMotionCruiseVelocity(cruiseVel, timeoutMs);
			talonSRX1.configMotionAcceleration(acc, timeoutMs);
			talonSRX2.configMotionCruiseVelocity(cruiseVel, timeoutMs);
            talonSRX2.configMotionAcceleration(acc, timeoutMs);	
            
            talonSRX3.selectProfileSlot(0, pidIdx); //(int slotIdx, int pidIdx) pidIdx should be 0
			talonSRX3.config_kF(0, 1.3, timeoutMs);     //(int slotIdx, double value, int timeoutMs)
			talonSRX3.config_kP(0, 4.0, timeoutMs);
			talonSRX3.config_kI(0, 0.03, timeoutMs);
			talonSRX3.config_kD(0, 30, timeoutMs);
			talonSRX3.config_IntegralZone(0, 20, timeoutMs);

			// PID controls Rear Left Motor
			talonSRX4.selectProfileSlot(0, pidIdx); //(int slotIdx, int pidIdx) pidIdx should be 0
			talonSRX4.config_kF(0, 1.4, timeoutMs);     //(int slotIdx, double value, int timeoutMs)
			talonSRX4.config_kP(0, 4, timeoutMs);
			talonSRX4.config_kI(0, 0.02, timeoutMs);
			talonSRX4.config_kD(0, 40, timeoutMs);
			talonSRX4.config_IntegralZone(0, 20, timeoutMs);

			// PID controls Front Right Motor
			talonSRX1.selectProfileSlot(0, pidIdx); //(int slotIdx, int pidIdx) pidIdx should be 0
			talonSRX1.config_kF(0, 2.3, timeoutMs);     //(int slotIdx, double value, int timeoutMs)
			talonSRX1.config_kP(0, 4.0, timeoutMs);
			talonSRX1.config_kI(0, 0.03, timeoutMs);
			talonSRX1.config_kD(0, 50, timeoutMs);
			talonSRX1.config_IntegralZone(0, 20, timeoutMs);

			// PID controls Rear Right Motor
			talonSRX2.selectProfileSlot(0, pidIdx); //(int slotIdx, int pidIdx) pidIdx should be 0
			talonSRX2.config_kF(0, 1.4, timeoutMs);     //(int slotIdx, double value, int timeoutMs)
			talonSRX2.config_kP(0, 4.0, timeoutMs);
			talonSRX2.config_kI(0, 0.02, timeoutMs);
			talonSRX2.config_kD(0, 5, timeoutMs);
			talonSRX2.config_IntegralZone(0, 20, timeoutMs);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ClimbCmd());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void climber(boolean up, boolean down, boolean stay) {
        //talonSRX1.set(speed);
        //talonSRX2.set(speed);
        //talonSRX3.set(speed);
        //talonSRX4.set(speed);

        if (up) {
            talonSRX1.set(ControlMode.MotionMagic, posUp);
            talonSRX2.set(ControlMode.MotionMagic, posUp);
            talonSRX3.set(ControlMode.MotionMagic, posUp);
            talonSRX4.set(ControlMode.MotionMagic, posUp);
        }
        else if (down) {
            talonSRX1.set(ControlMode.MotionMagic, posDown);
            talonSRX2.set(ControlMode.MotionMagic, posDown);
            talonSRX3.set(ControlMode.MotionMagic, posDown);
            talonSRX4.set(ControlMode.MotionMagic, posDown);
        }
        else if (stay) {
            talonSRX1.set(ControlMode.MotionMagic, talonSRX1.getSelectedSensorPosition());
            talonSRX2.set(ControlMode.MotionMagic, talonSRX2.getSelectedSensorPosition());
            talonSRX3.set(ControlMode.MotionMagic, talonSRX3.getSelectedSensorPosition());
            talonSRX4.set(ControlMode.MotionMagic, talonSRX4.getSelectedSensorPosition());
        }
    }
    public void ClimbWheels(double spinSpeed) {
        wheelTalon.set(spinSpeed);
    }

}

