// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.DeepSpaceCompetitionBot.subsystems;


import org.usfirst.frc5229.DeepSpaceCompetitionBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

import com.revrobotics.CANPIDController;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import org.usfirst.frc5229.DeepSpaceCompetitionBot.MyClasses.MySparkMaxMecanumDrive;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SPI;

/**
 *
 */
public class DrivetrainSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax leftFront;
    private CANSparkMax leftRear;
    private CANSparkMax rightFront;
    private CANSparkMax rightRear;
    private MecanumDrive mecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS    

    private CANPIDController leftFrontCANPID;
    private CANPIDController leftRearCANPID;
    private CANPIDController rightFrontCANPID;
    private CANPIDController rightRearCANPID;
    private AHRS gyro;
    private double rampRate = 0.7;
    private double gyroAngle;

    public DrivetrainSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFront = new CANSparkMax(7, MotorType.kBrushless);
        
        
        
        leftRear = new CANSparkMax(6, MotorType.kBrushless);
        
        
        
        rightFront = new CANSparkMax(5, MotorType.kBrushless);
        
        
        
        rightRear = new CANSparkMax(1, MotorType.kBrushless);
        
        
        
        mecanumDrive = new MecanumDrive(leftFront, leftRear,
              rightFront, rightRear);
        addChild("Mecanum Drive",mecanumDrive);
        mecanumDrive.setSafetyEnabled(true);
        mecanumDrive.setExpiration(0.1);
        mecanumDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    gyro = new AHRS(SPI.Port.kMXP);

    /*leftFrontCANPID = new CANPIDController(leftFront);
    leftRearCANPID = new CANPIDController(leftRear);
    rightFrontCANPID = new CANPIDController(rightFront);
    rightRearCANPID = new CANPIDController(rightRear);

    mecanumDrive = new MySparkMaxMecanumDrive(leftFront, leftRear, rightFront, rightRear, leftFrontCANPID, leftRearCANPID, rightFrontCANPID, rightRearCANPID);
    
    addChild("Mecanum Drive",mecanumDrive);
    mecanumDrive.setSafetyEnabled(true);
    mecanumDrive.setExpiration(0.1);
    mecanumDrive.setMaxOutput(5000.0);

    leftFrontCANPID.setFF(0.000165);
    leftFrontCANPID.setP(100);
    leftFrontCANPID.setI(0.3);
    leftFrontCANPID.setD(700);
    leftFrontCANPID.setIZone(30);
    leftRearCANPID.setFF(0.000165);
    leftRearCANPID.setP(100);
    leftRearCANPID.setI(0.3);
    leftRearCANPID.setD(700);
    leftRearCANPID.setIZone(30);
    rightFrontCANPID.setFF(0.000165);
    rightFrontCANPID.setP(100);
    rightFrontCANPID.setI(0.3);
    rightFrontCANPID.setD(700);
    rightFrontCANPID.setIZone(30);
    rightRearCANPID.setFF(0.000165);
    rightRearCANPID.setP(100);
    rightRearCANPID.setI(0.3);
    rightRearCANPID.setD(700);
    rightRearCANPID.setIZone(30);*/

    leftFront.setIdleMode(IdleMode.kBrake);
    rightFront.setIdleMode(IdleMode.kBrake);
    leftRear.setIdleMode(IdleMode.kBrake);
    rightRear.setIdleMode(IdleMode.kBrake);

    leftFront.setOpenLoopRampRate(rampRate);
    leftRear.setOpenLoopRampRate(rampRate);
    rightFront.setOpenLoopRampRate(rampRate);
    rightRear.setOpenLoopRampRate(rampRate);

    leftFront.setSmartCurrentLimit(39);
    leftRear.setSmartCurrentLimit(39);
    rightFront.setSmartCurrentLimit(39);
    rightRear.setSmartCurrentLimit(39);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DrivetrainCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every l"periodic is running");
        gyroAngle = gyro.getAngle();

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    public void drive(double ySpeed, double xSpeed, double zRotation) {
        mecanumDrive.driveCartesian(ySpeed, xSpeed, zRotation * 0.75, gyroAngle);
    }
}
