// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.DeepSpaceCompetitionBot.subsystems;


import org.usfirst.frc5229.DeepSpaceCompetitionBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DrivetrainSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax leftFront;
    private CANSparkMax leftRear;
    private CANSparkMax rightFront;
    private CANSparkMax rightRear;
    private MecanumDrive mecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS    

    public DrivetrainSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFront = new CANSparkMax(7, MotorType.kBrushless);
        
        
        
        leftRear = new CANSparkMax(6, MotorType.kBrushless);
        
        
        
        rightFront = new CANSparkMax(5, MotorType.kBrushless);
        
        
        
        rightRear = new CANSparkMax(1, MotorType.kBrushless);
        
        
        
        mecanumDrive = new MecanumDrive(leftFront, leftRear,
              rightFront, rightRear);
        addChild("Mecanum Drive",mecanumDrive);
        mecanumDrive.setSafetyEnabled(true);
        mecanumDrive.setExpiration(0.1);
        mecanumDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    leftFront.setIdleMode(IdleMode.kBrake);
    rightFront.setIdleMode(IdleMode.kBrake);
    leftRear.setIdleMode(IdleMode.kBrake);
    rightRear.setIdleMode(IdleMode.kBrake);

    leftFront.setOpenLoopRampRate(0.5);
    leftRear.setOpenLoopRampRate(0.5);
    rightFront.setOpenLoopRampRate(0.5);
    rightRear.setOpenLoopRampRate(0.5);

    leftFront.setSmartCurrentLimit(39);
    leftRear.setSmartCurrentLimit(39);
    rightFront.setSmartCurrentLimit(39);
    rightRear.setSmartCurrentLimit(39);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DrivetrainCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every l"periodic is running");

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    public void drive(double ySpeed, double xSpeed, double zRotation, double gyroAngle) {
        mecanumDrive.driveCartesian(ySpeed, xSpeed, zRotation, gyroAngle);
    }
  
    public void halfSpeed(double ySpeed, double xSpeed, double zRotation, double gyroAngle) {
        mecanumDrive.driveCartesian(ySpeed/2, xSpeed/2, zRotation/2, gyroAngle);
    }

    public void quarterSpeed(double ySpeed, double xSpeed, double zRotation, double gyroAngle) {
        mecanumDrive.driveCartesian(ySpeed/4, xSpeed/4, zRotation/4, gyroAngle);
    }
}
